<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hongchengfhc.github.io/</id>
    <title>Gridea</title>
    <updated>2020-09-14T03:07:09.433Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hongchengfhc.github.io/"/>
    <link rel="self" href="https://hongchengfhc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://hongchengfhc.github.io/images/avatar.png</logo>
    <icon>https://hongchengfhc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[记一次使用apng动画两种方式]]></title>
        <id>https://hongchengfhc.github.io/post/ji-yi-ci-shi-yong-apng-dong-hua-liang-chong-fang-shi/</id>
        <link href="https://hongchengfhc.github.io/post/ji-yi-ci-shi-yong-apng-dong-hua-liang-chong-fang-shi/">
        </link>
        <updated>2020-09-14T03:05:29.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>apng-canvas</li>
<li>apng-js</li>
</ol>
<h3 id="1-使用apng-canvas做apng动画">1. 使用apng-canvas做apng动画</h3>
<p>使用起来代码简单，容易理解；但是监听动画的过程。</p>
<h5 id="apng">APNG</h5>
<p>APNG 全称是 Animated Portable Network Graphics ， 是 PNG 格式的动画扩展。APNG 的第1帧为标准PNG图像，剩余的动画和帧速等数据放在PNG扩展数据块里。这里有点类似于视频的关键帧，关键帧有完整的图像信息，而两个关键帧之间只保留了变化的信息。<br>
简单来说，APNG 支持全彩和透明，无杂边问题.</p>
<p>但并不是所有软件都支持APNG。</p>
<p>Android上有<code>APNG View</code>等，iOS上有<code>APNGKit</code>等</p>
<p>而Web上，Firfox和Safari是支持APNG，Chrome是支持WebP的。</p>
<p>所以我们要在Web上使用APNG可以使用Canvas</p>
<h4 id="canvas-apng">Canvas &amp; APNG</h4>
<p>我们可以使用 <a href="https://github.com/davidmz/apng-canvas">apng-canvas</a>库。</p>
<h4 id="举例">举例</h4>
<pre><code>APNG.ifNeeded().then(function() {
    var images = document.querySelectorAll(&quot;.apng-image&quot;);
    for (var i = 0; i &lt; images.length; i++) APNG.animateImage(images[i]);
});
</code></pre>
<p><code>APNG</code> 这个对象是<code>apng-canvas</code>这个库提供的，<code>ifNeeded()</code>函数是用来判断浏览器是否支持APNG。</p>
<p><code>APNG.animateImage()</code>是需要传入一个 Image Element，之后就交给Canvas去处理了。</p>
<h3 id="2-使用apng-js做apng动画">2. 使用apng-js做apng动画</h3>
<p>注：底部有作者 apng.vue的组件源码作参考</p>
<h5 id="apng-js">apng-js</h5>
<p><a href="https://github.com/davidmz/apng-js">apng-js</a> 官方<a href="https://davidmz.github.io/apng-js/">demo</a></p>
<h5 id="使用方式">使用方式</h5>
<pre><code>import parseAPNG from 'apng-js';

const apng = parseAPNG(buffer);
if (apng instanceof Error) {
    // handle error
}
// work with apng object
</code></pre>
<p><code>parseAPNG</code>的参数是一个ArrayBuffer类型，比起apng-canvas的使用要较为复杂一些。<br>
在这里我就举一下我之前的做法：</p>
<p>我们需要的是加载本地和远端的apng图片来进行动画操作.</p>
<p>因为最终参数需要一个ArrayBuffer类型的，而我们只有一张图片的url，因此需要进行转换。<br>
经过测试得出转换步骤如下：</p>
<ol>
<li>先去请求这张图片以返回类型设为blob类型</li>
</ol>
<pre><code>// 加载图片资源，得到blob类型的值
loaderURL(url) {
  function createXmlHttpRequest() {
    if (window.ActiveXObject) {
      return new ActiveXObject('Microsoft.XMLHTTP');
    } else if (window.XMLHttpRequest) {
      return new XMLHttpRequest();
    }
  }
  return new Promise((resolve) =&gt; {
    let xhr = createXmlHttpRequest();
    xhr.open(&quot;get&quot;, url, true);
    xhr.responseType = &quot;blob&quot;;
    xhr.onload = function (res) {
      if (this.status == 200) {
        var blob = this.response;
        resolve(blob);
      }
    }
    xhr.send();
  })
}
</code></pre>
<ol start="2">
<li>将blob转换成ArrayBuffer类型</li>
</ol>
<pre><code>// 将blob转换成buffer
blobToArrayBuffer(blob) {
  return new Promise((resolve) =&gt; {
    // Blob 转 ArrayBuffer
    let reader = new FileReader();
    reader.readAsArrayBuffer(blob);
    reader.onload = function() {
      console.log(reader.result)
      resolve(reader.result)
    }
  })
}
</code></pre>
<ol start="3">
<li>可以使用apng-js的parseAPNG得到apng对象，通过该对象可以获得动画播放器player</li>
</ol>
<pre><code>var apng = parseAPNG(buffer);
apng.getPlayer(canvas.getContent('2d')).then(player =&gt; {
    // 调用播放动画
    player.play();
})
</code></pre>
<p>player对象中有</p>
<ul>
<li>play --  playback started;</li>
<li>frame -- frame played (frame number passed as event parameter);</li>
<li>pause --  playback paused;</li>
<li>stop -- playback stopped;</li>
<li>end -- playback ended (for APNG with finite count of plays).<br>
通过官方文档可看出，我们可以监听整个动画的事件。<br>
官方demo中监听代码片段<br>
<img src="https://upload-images.jianshu.io/upload_images/19403677-ef5b1a70c3138d06.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" loading="lazy"></li>
</ul>
<p>作者apng.vue源码</p>
<pre><code>&lt;template lang=&quot;pug&quot;&gt;
  .apng-div(ref=&quot;apng-div&quot; v-if=&quot;src&quot;)
    canvas(ref=&quot;apng-canvas&quot;)
&lt;/template&gt;

&lt;script&gt;
// require('./../libs/apng-canvas.min.js')
import commonMixin from '@/mixins/commonMixin'
import parseAPNG from 'apng-js'

export default {
  mixins: [commonMixin],
  data() {
    return {
    }
  },

  props: {
    width: {
      type: String | Number,
      required: true
    },
    height: {
      type: String | Number,
      required: true
    },
    src: {
      type: String,
      required: true
    }
  },

  mounted() {
    let canvas = this.$refs['apng-canvas'];
    this.loaderURL(this.src).then(blob =&gt; {
      console.log(blob)

      this.blobToArrayBuffer(blob).then(arrayBuffer =&gt; {
        let apng = parseAPNG(arrayBuffer);
        canvas.width = apng.width;
        canvas.height = apng.height;
        let scale = this.width * this.remVal / apng.width
        canvas.style = 'zoom: ' + scale;
        apng.getPlayer(canvas.getContext('2d')).then(player =&gt; {
          player.play();
        })
      })
    })
  },
  methods: {
    calc(val) {
      return this.remVal * val;
    },
    blobToArrayBuffer(blob) {
      return new Promise((resolve) =&gt; {
        // Blob 转 ArrayBuffer
        let reader = new FileReader();
        reader.readAsArrayBuffer(blob);
        reader.onload = function() {
          console.log(reader.result)
          resolve(reader.result)
        }
      })
    },
    loaderURL(url) {
      function createXmlHttpRequest() {
        if (window.ActiveXObject) {
          return new ActiveXObject('Microsoft.XMLHTTP');
        } else if (window.XMLHttpRequest) {
          return new XMLHttpRequest();
        }
      }
      return new Promise((resolve) =&gt; {
        let xhr = createXmlHttpRequest();
        xhr.open(&quot;get&quot;, url, true);
        xhr.responseType = &quot;blob&quot;;
        xhr.onload = function (res) {
          if (this.status == 200) {
            var blob = this.response;
            resolve(blob);
          }
        }
        xhr.send();
      })
    }
  }
}
&lt;/script&gt;

&lt;style lang=&quot;less&quot; scoped&gt;

&lt;/style&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pm2启动npm命令]]></title>
        <id>https://hongchengfhc.github.io/post/pm2-qi-dong-npm-ming-ling/</id>
        <link href="https://hongchengfhc.github.io/post/pm2-qi-dong-npm-ming-ling/">
        </link>
        <updated>2020-08-19T08:01:29.000Z</updated>
        <content type="html"><![CDATA[<h5 id="使用方式">* 使用方式</h5>
<pre><code>package.json中
&quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;,
    &quot;dev&quot;: &quot;cross-env EXPRESS_NODE_ENV=dev EXPRESS_PORT=3000 nodemon ./bin/www --exec babel-node&quot;,
    &quot;sit&quot;: &quot;cross-env EXPRESS_NODE_ENV=sit nodemon ./bin/www --exec babel-node&quot;,
  },
  
  
简单用法
1. npm run dev
2. pm2 start npm -- run dev
以上使用是等效的
  
pm2 start npm --watch --name nickname -- run sit
// 启动 npm run sit
eg: pm2 start npm --watch --name h5toolsit -- run sit
其中 --watch监听代码变化，--name 重命令任务名称，-- run后面跟脚本名字
</code></pre>
<h3 id="为什么需要使用pm2">为什么需要使用PM2</h3>
<ul>
<li>
<p>因为node.js 是单进程，进程被杀死后整个服务就跪了，所以需要进程管理工具，但是pm2 远远不止这些。</p>
</li>
<li>
<p>介绍<br>
PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。 当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载， PM2 是完美的。</p>
</li>
</ul>
<h5 id="特性">特性</h5>
<pre><code>1.内建负载均衡（使用Node cluster 集群模块）
2.后台运行
3.0秒停机重载(维护升级的时候不需要停机).
4.具有Ubuntu和CentOS 的启动脚本
5.停止不稳定的进程（避免无限循环）
6.控制台检测
7.提供 HTTP API
8.远程控制和实时的接口API ( Nodejs 9.模块,允许和PM2进程管理器交互 )
</code></pre>
<h3 id="全局安装">全局安装</h3>
<pre><code>npm install -g pm2
</code></pre>
<h5 id="查看详细状态信息">查看详细状态信息</h5>
<pre><code>pm2 show (appname | id)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/19403677-5c286846ba1fba70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="状态图片" loading="lazy"></figure>
<hr>
<h5 id="查看所有启动的进程列表">查看所有启动的进程列表</h5>
<pre><code>pm2 list |  pm2 ls
</code></pre>
<h2 id=""><img src="https://upload-images.jianshu.io/upload_images/19403677-4ed4249d57ee0a02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="列表图片" loading="lazy"></h2>
<h5 id="监控每个node进程的cpu的内存使用情况">监控每个node进程的cpu的内存使用情况</h5>
<pre><code>pm2 monit
</code></pre>
<h2 id="-2"><img src="https://upload-images.jianshu.io/upload_images/19403677-74842ef539c6e777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="monit图片" loading="lazy"></h2>
<h5 id="显示所有进程的日志信息">显示所有进程的日志信息</h5>
<pre><code>pm2 logs
</code></pre>
<h2 id="-3"><img src="https://upload-images.jianshu.io/upload_images/19403677-4296e640ef585f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志图片" loading="lazy"></h2>
<h4 id="常用命令">常用命令</h4>
<pre><code>npm install pm2 -g     # 命令行安装 pm2 
pm2 start app.js -i 4 #后台运行pm2，启动4个app.js 
                              # 也可以把'max' 参数传递给 start
                              # 正确的进程数目依赖于Cpu的核心数目
pm2 start app.js --name my-api # 命名进程
pm2 list               # 显示所有进程状态
pm2 monit              # 监视所有进程
pm2 logs               #  显示所有进程日志
pm2 stop all           # 停止所有进程
pm2 restart all        # 重启所有进程
pm2 reload all         # 0秒停机重载进程 (用于 NETWORKED 进程)
pm2 stop 0             # 停止指定的进程
pm2 restart 0          # 重启指定的进程
pm2 startup            # 产生 init 脚本 保持进程活着
pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)
pm2 delete 0           # 杀死指定的进程
pm2 delete all         # 杀死全部进程
</code></pre>
<p><a href="%5Bhttps://juejin.im/post/5be406705188256dbb5176f9%5D(https://juejin.im/post/5be406705188256dbb5176f9)">更多用法</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac显示隐藏文件]]></title>
        <id>https://hongchengfhc.github.io/post/mac-xian-shi-yin-cang-wen-jian/</id>
        <link href="https://hongchengfhc.github.io/post/mac-xian-shi-yin-cang-wen-jian/">
        </link>
        <updated>2020-08-19T08:00:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="显示隐藏文件">显示隐藏文件</h3>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true;killall Finder
</code></pre>
<h3 id="不显示隐藏文件">不显示隐藏文件</h3>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean false;killall Finder
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电脑上微信客户端多开]]></title>
        <id>https://hongchengfhc.github.io/post/dian-nao-shang-wei-xin-ke-hu-duan-duo-kai/</id>
        <link href="https://hongchengfhc.github.io/post/dian-nao-shang-wei-xin-ke-hu-duan-duo-kai/">
        </link>
        <updated>2020-08-19T08:00:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="mac上微信多开">Mac上微信多开</h3>
<pre><code>nohup /Applications/WeChat.app/Contents/MacOS/WeChat &gt; /dev/null 2&gt;&amp;1 &amp;
</code></pre>
<h3 id="windows微信多开">Windows微信多开</h3>
<blockquote>
<ul>
<li>找到wechat.exe的地址</li>
<li>我这里为 C:\Program Files (x86)\Tencent\WeChat\WeChat.exe</li>
</ul>
</blockquote>
<pre><code>TASKKILL /F /IM wechat.exe
start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;
start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用nvm和nrm安装并管理node.js开发环境]]></title>
        <id>https://hongchengfhc.github.io/post/shi-yong-nvm-he-nrm-an-zhuang-bing-guan-li-nodejs-kai-fa-huan-jing/</id>
        <link href="https://hongchengfhc.github.io/post/shi-yong-nvm-he-nrm-an-zhuang-bing-guan-li-nodejs-kai-fa-huan-jing/">
        </link>
        <updated>2020-08-19T07:58:12.000Z</updated>
        <content type="html"><![CDATA[<p>在进行前端开发的时候，会安装多个版本的node.js，另外还会用到第三方源的管理工具npm,所以这里推荐两个工具来分别管理它们:  <a href="%5Bhttps://github.com/nvm-sh/nvm%5D(https://github.com/nvm-sh/nvm)">nvm</a> 和 <a href="%5Bhttps://github.com/Pana/nrm%5D(https://github.com/Pana/nrm)">nrm</a></p>
<h3 id="卸载已安装到全局的-nodenpm">卸载已安装到全局的 node/npm</h3>
<p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>
<p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p>
<p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>
<pre><code>npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装

sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录
sudo rm /usr/local/bin/node #删除 node
cd  /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk '{print $9}'| xargs rm #删除全局 node 模块注册的软链
</code></pre>
<h3 id="安装-nvm">安装 nvm</h3>
<h4 id="mac-或-linux-系统">Mac 或 Linux 系统</h4>
<p>可以使用下面的脚本安装:</p>
<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
</code></pre>
<p>执行完成之后需要关闭当前的命令行，然后重新打开。如果出现<code>Unknown option: -c</code>错误，需要先<a href="https://stackoverflow.com/a/27674776/1805493">升级git到1.7.10以上版本</a>。如果出现 <code>nvm: command not found</code> 错误的话，可以首先执行 <code>touch ~/.bash_profile</code> 命令创建bash_profile文件，然后执行 <code>source ~/.bash_profile</code>命令或关闭terminal窗口并重新打开一下即可。<br>
Mac下推荐使用 <a href="%5Bhttps://github.com/robbyrussell/oh-my-zsh%5D(https://github.com/robbyrussell/oh-my-zsh)">oh-my-zsh</a> 代替默认的base shell</p>
<h3 id="安装切换各版本-nodenpm">安装切换各版本 node/npm</h3>
<pre><code>nvm install stable #安装最新稳定版 node，现在是 5.0.0
nvm install 4.2.2 #安装 4.2.2 版本
nvm install 0.12.7 #安装 0.12.7 版本

# 特别说明：以下模块安装仅供演示说明，并非必须安装模块
nvm use 0 #切换至 0.12.7 版本
npm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v0.12.7/lib/mz-fis
nvm use 4 #切换至 4.2.2 版本
npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli

nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7
</code></pre>
<h3 id="使用nvmrc-文件配置项目所使用的-node-版本">使用.nvmrc 文件配置项目所使用的 node 版本</h3>
<p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：</p>
<pre><code>cd &lt;项目根目录&gt;  #进入项目根目录
echo 4 &gt; .nvmrc #添加 .nvmrc 文件
nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本
node -v #查看 node 是否切换为对应版本
</code></pre>
<h3 id="使用-nrm-管理不同的npm源">使用 <a href="https://github.com/Pana/nrm">nrm</a> 管理不同的npm源</h3>
<p>众所周知的原因，国内使用原始的npm源速度非常慢，但使用别名也会出现很多不方便的地方，nrm由此产生，可以随意切换不同的npm源。</p>
<p>安装非常方便，使用 npm install nrm -g 进行安装，安装成功之后可以使用 nrm ls 查看源列表：<br>
<img src="https://upload-images.jianshu.io/upload_images/19403677-a6a0310f7e92e566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nrmls-icon.png" loading="lazy"></p>
<p>然后通过 nrm use cnpm 将npm源切换为cnpm，再使用 nrm ls 命令查看，可以发现源已经切换为 cnpm了：<br>
<img src="https://upload-images.jianshu.io/upload_images/19403677-4b0f5c70ca31e505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="usecnpm-icon.png" loading="lazy"><br>
这样设置之后，以后使用npm命令进行安装或更新的时候，默认就使用cnpm源了，非常方便。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安装 iTerm2 && Oh My Zsh]]></title>
        <id>https://hongchengfhc.github.io/post/an-zhuang-iterm2-and-oh-my-zsh/</id>
        <link href="https://hongchengfhc.github.io/post/an-zhuang-iterm2-and-oh-my-zsh/">
        </link>
        <updated>2020-08-19T07:47:36.000Z</updated>
        <summary type="html"><![CDATA[<h5 id="安装-iterm2-oh-my-zsh">安装 iTerm2 &amp;&amp; Oh My Zsh</h5>
<ol>
<li>
<p>下载iTerm2<br>
https://iterm2.com/</p>
</li>
<li>
<p>下载  oh-my-zsh<br>
curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</p>
</li>
<li>
<p>安装Powerline<br>
如果你的终端能够正常执行pip指令，那么直接执行下面的指令可以完成安装<br>
pip install powerline-status --user<br>
如果没有，则先执行安装pip指令<br>
sudo easy_install pip</p>
</li>
<li>
<p>安装字体库<br>
将字体库下载下来 	https://github.com/powerline/fonts<br>
1）将工程下载下来后cd到install.sh文件所在目录<br>
2）执行指令安装字体库<br>
执行./install.sh指令安装所有Powerline字体<br>
安装完成后提示所有字体均已下载到/Users/superdanny/Library/Fonts路径下<br>
All Powerline fonts installed to /Users/superdanny/Library/Fonts</p>
</li>
<li>
<p>设置iTerm2 的 Regular Font 和 Non-ASCII Font<br>
Profiles -&gt; Default -&gt; Text -&gt; Regular Font<br>
我这里设置的是12pt Meslo LG S DZ Regular for Powerline</p>
</li>
<li>
<p>配色<br>
1）安装配色方案<br>
将配色方案下载下来		https://github.com/altercation/solarized</p>
<pre><code> 进入刚刚下载的工程的solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm2 里
</code></pre>
<p>2）配置配色方案<br>
通过load presets选择刚刚安装的配色主题即可<br>
Profiles -&gt; Colors -&gt; Load Presets...</p>
</li>
<li>
<p>使用agnoster主题<br>
1）下载agnoster主题<br>
下载主题  https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor<br>
到下载的工程里面运行install文件,主题将安装到~/.oh-my-zsh/themes目录下<br>
2）设置该主题<br>
进入~/.zshrc打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster。ZSH_THEME=&quot;agnoster&quot;（agnoster即为要设置的主题）</p>
</li>
<li>
<p>增加指令高亮效果 zsh-syntax-highlighting<br>
指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮</p>
<p>cd ~/.oh-my-zsh/custom/plugins/</p>
<p>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</p>
<p>vi ~/.zshrc</p>
<p>打开.zshrc文件，找到plugins=(git)<br>
plugins=(git zsh-syntax-highlighting)<br>
然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>
<p>执行命令使刚才的修改生效：<br>
source ~/.zshrc</p>
</li>
<li>
<p>可选择、命令补全<br>
跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。<br>
cd ~/.oh-my-zsh/custom/plugins/<br>
git clone https://github.com/zsh-users/zsh-autosuggestions<br>
vi ~/.zshrc</p>
</li>
</ol>
<p>添加 plugins=(<br>
git<br>
zsh-autosuggestions<br>
zsh-syntax-highlighting<br>
)</p>
<h2 id="获取zshrc所在目录">获取.zshrc所在目录</h2>
<p>我这里是 /Users/macbook/.zshrc</p>
<p>Mac OS X中默认不存在~/.zshrc，因此您需要创建它。 ~/转换为用户的主目录，.zshrc是ZSH配置文件本身。</p>
<p>所以只需打开一个“终端”或“iTerm”窗口并像这样创建该文件;我正在使用nano作为文本编辑器，但随意使用您认为合适的文本编辑器：</p>
<p>nano ~/.zshrc<br>
然后将ZSH_THEME值设置为您想要使用的任何值，如下所示：</p>
<p>ZSH_THEME=&quot;robbyrussell&quot;</p>
<p>现在将文件保存在nano中，只需按 ctrl + X 。当它提示：</p>
<p>保存修改后的缓冲区（回答“否”会破坏更改）？</p>
<p>只需输入“Y”，然后你会得到一个看起来像这样的新提示;请注意路径/Users/jake/将匹配您当地用户的路径：</p>
<p>要写的文件名：/Users/jake/.zshrc</p>
<p>现在只需按 return ，文件将被保存，您现在将返回“终端”或“iTerm”中的命令行提示符。如果您现在退出“终端”或者“iTerm”然后打开一个新窗口，现在应该加载~/.zshrc设置。</p>
<p>附上作者的iTerm2的背景图</p>
<p><a href="https://s1.ax1x.com/2020/03/20/86X3J1.jpg">图片链接</a></p>
<p><a href="https://jingyan.baidu.com/article/ca41422f7d5e801eae99edae.html">iTerm2如何设置背景图片</a></p>
<p><a href="https://segmentfault.com/q/1010000002617777">iTerm2如何分屏之后背景图不变？</a></p>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/19403677-f135459ee6dfd6c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<h5 id="安装-iterm2-oh-my-zsh">安装 iTerm2 &amp;&amp; Oh My Zsh</h5>
<ol>
<li>
<p>下载iTerm2<br>
https://iterm2.com/</p>
</li>
<li>
<p>下载  oh-my-zsh<br>
curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</p>
</li>
<li>
<p>安装Powerline<br>
如果你的终端能够正常执行pip指令，那么直接执行下面的指令可以完成安装<br>
pip install powerline-status --user<br>
如果没有，则先执行安装pip指令<br>
sudo easy_install pip</p>
</li>
<li>
<p>安装字体库<br>
将字体库下载下来 	https://github.com/powerline/fonts<br>
1）将工程下载下来后cd到install.sh文件所在目录<br>
2）执行指令安装字体库<br>
执行./install.sh指令安装所有Powerline字体<br>
安装完成后提示所有字体均已下载到/Users/superdanny/Library/Fonts路径下<br>
All Powerline fonts installed to /Users/superdanny/Library/Fonts</p>
</li>
<li>
<p>设置iTerm2 的 Regular Font 和 Non-ASCII Font<br>
Profiles -&gt; Default -&gt; Text -&gt; Regular Font<br>
我这里设置的是12pt Meslo LG S DZ Regular for Powerline</p>
</li>
<li>
<p>配色<br>
1）安装配色方案<br>
将配色方案下载下来		https://github.com/altercation/solarized</p>
<pre><code> 进入刚刚下载的工程的solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm2 里
</code></pre>
<p>2）配置配色方案<br>
通过load presets选择刚刚安装的配色主题即可<br>
Profiles -&gt; Colors -&gt; Load Presets...</p>
</li>
<li>
<p>使用agnoster主题<br>
1）下载agnoster主题<br>
下载主题  https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor<br>
到下载的工程里面运行install文件,主题将安装到~/.oh-my-zsh/themes目录下<br>
2）设置该主题<br>
进入~/.zshrc打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster。ZSH_THEME=&quot;agnoster&quot;（agnoster即为要设置的主题）</p>
</li>
<li>
<p>增加指令高亮效果 zsh-syntax-highlighting<br>
指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮</p>
<p>cd ~/.oh-my-zsh/custom/plugins/</p>
<p>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</p>
<p>vi ~/.zshrc</p>
<p>打开.zshrc文件，找到plugins=(git)<br>
plugins=(git zsh-syntax-highlighting)<br>
然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>
<p>执行命令使刚才的修改生效：<br>
source ~/.zshrc</p>
</li>
<li>
<p>可选择、命令补全<br>
跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。<br>
cd ~/.oh-my-zsh/custom/plugins/<br>
git clone https://github.com/zsh-users/zsh-autosuggestions<br>
vi ~/.zshrc</p>
</li>
</ol>
<p>添加 plugins=(<br>
git<br>
zsh-autosuggestions<br>
zsh-syntax-highlighting<br>
)</p>
<h2 id="获取zshrc所在目录">获取.zshrc所在目录</h2>
<p>我这里是 /Users/macbook/.zshrc</p>
<p>Mac OS X中默认不存在~/.zshrc，因此您需要创建它。 ~/转换为用户的主目录，.zshrc是ZSH配置文件本身。</p>
<p>所以只需打开一个“终端”或“iTerm”窗口并像这样创建该文件;我正在使用nano作为文本编辑器，但随意使用您认为合适的文本编辑器：</p>
<p>nano ~/.zshrc<br>
然后将ZSH_THEME值设置为您想要使用的任何值，如下所示：</p>
<p>ZSH_THEME=&quot;robbyrussell&quot;</p>
<p>现在将文件保存在nano中，只需按 ctrl + X 。当它提示：</p>
<p>保存修改后的缓冲区（回答“否”会破坏更改）？</p>
<p>只需输入“Y”，然后你会得到一个看起来像这样的新提示;请注意路径/Users/jake/将匹配您当地用户的路径：</p>
<p>要写的文件名：/Users/jake/.zshrc</p>
<p>现在只需按 return ，文件将被保存，您现在将返回“终端”或“iTerm”中的命令行提示符。如果您现在退出“终端”或者“iTerm”然后打开一个新窗口，现在应该加载~/.zshrc设置。</p>
<p>附上作者的iTerm2的背景图</p>
<p><a href="https://s1.ax1x.com/2020/03/20/86X3J1.jpg">图片链接</a></p>
<p><a href="https://jingyan.baidu.com/article/ca41422f7d5e801eae99edae.html">iTerm2如何设置背景图片</a></p>
<p><a href="https://segmentfault.com/q/1010000002617777">iTerm2如何分屏之后背景图不变？</a></p>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/19403677-f135459ee6dfd6c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" loading="lazy"></figure>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://hongchengfhc.github.io/post/hello-gridea/</id>
        <link href="https://hongchengfhc.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>